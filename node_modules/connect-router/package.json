{
  "name": "connect-router",
  "description": "Robust routing for express.js",
  "version": "0.0.2",
  "repository": {},
  "engines": {},
  "dependencies": {
    "dolce": "*"
  },
  "devDependencies": {
    "express": "*",
    "connect": "*",
    "crema": "*",
    "haba": "*",
    "ebnf-diagram": "git+https://crcn@github.com/crcn/node-ebnf-diagram.git"
  },
  "main": "./lib/index.js",
  "readme": "## Connect router with syntactic sugar\n\n\n\n## Basic Example\n\n```javascript\nvar express = require('express'),\napp = express.createServer(),\nconnectRouter = require('connect-router');\n\napp.use(connectRouter(function(router) {\n\t\t\n\t\n\t//you can use existing middleware to explicitly define\n\t//them in routes\n\trouter.on('parseBody', express.bodyParser());\n\n\t/**\n\t * checks if a user exists\n\t */\n\n\trouter.on('user/exists', function(req, res, next) {\n\t\t\t\n\t\t//pseudocode userExists func\n\t\tif(userExists(req.query.username)) {\n\t\t\tres.send('That username already exists');\n\t\t\treturn;\n\t\t}\n\n\t\tnext();\n\t});\n\n\t/**\n\t * Check if the user exists before signing up\n\t */\n\n\trouter.on('-method=POST parseBody -> user/exists -> signup', function(req, res, next) {\n\t\t\n\t\tres.send('Successfuly signed up ');\n\n\t});\n\n}));\n\n//OR load routes from a directory\napp.use(connectRouter(__dirname + '/path/to/routes', 'another/path/to/traverse/**/*')); \n\n\napp.listen(8080);\n```\n\n## Syntax\n\n![Alt syntax](http://i.imgur.com/Q3IJz.png)\n\n## API\n\n### .router(route, ...);\n\nLoads in the given routes. Can be a function, or a list of paths to load in. For example:\n\n```javascript\n\n//scans a directory for routes\nconnectRouter(__dirname + '/path/to/scan');\n\n//recursively scans paths for routes\nconnectRouter(__dirname + '/path/to/scan/**/*');\n\n//scans for files ending in .route.js\nconnectRouter(__dirname + '/path/to/scan/**/*.route.js');\n\n//load in a func\nconnectRouter(function(router) {\n\n\trouter.on('something', function(req, res) {\n\t\tres.send('done!')\n\t});\n\n});\n\n\n```\n\nA route plugin should look something like this:\n\n```javascript\n\nexports.plugin = function(router) {\n\t\n\trouter.on('-method=POST signup', function() {\n\t\t//do stuff\n\t});\n}\n\n```\n\n\n\n## Explicit Middleware\n\nExplicit middleware is defined by using the `->` token. The basic example above uses explicit middleware, but here's another example:\n\n```javascript\n\nrouter.on('validate/token', function(req, res, next) {\n\t\n\tif(!tokenValid(req.data.token)) {\n\t\tres.send('That token is invalid');\n\t}\n\n\treq.profile = { username: 'someUsername' };\n\n\tnext();\n\n});\n\n//validate the user is logged in BEFORE returning the user profile\nrouter.on('-method=GET validate/token -> my/profile', function(req, res, next) {\n\t\n\t//do stuff with req.profile\n\t\n\tres.send('Your profile stuff');\n\n});\n\n```\n\n## Implicit Middleware\n\nImplicit middleware is used to *extend* existing routes. This is certainly useful if you want to drop in plugins which are specific to a given route. A good use case:\n\n\n### beta_user.js:\n\n```javascript\n\n//Since we're in beta, extend the signup route. If the user has been invited, then\n//go onto the ORIGINAL signup route, otherwise return an error. \n\n//AFTER XXXX is out of beta, all we need to do is remove beta_user.js, and users\n//can signup without any constraints.\nrouter.on('-method=POST signup/*', function(req, res, next) {\n\t\n\tif(!userInvited(req.data.signupToken)) {\n\t\tres.send('You have not been invited yet.');\n\t\treturn;\n\t}\n\n\tnext();\n});\n\n```\n\n### user.js\n\n```javascript\nrouter.on('-method=POST signup', function(req, res, next) {\n\t\n\tres.send('thanks for signing up!');\n\n\n});\n```\n\n## Greedy Middleware\n\nGreedy middleware allows you to wrap around entire paths. `some/route/**` means any path *after* `**` must go through this middleware. Here's an example:\n\n```javascript\n\n//injected as middleware if -perm is provided. -perm tags flag that a route\n//requires authorization\nrouter.on('-perm /**', function(req, res, next) {\n\t\n\tif(isAuthorized(req.data.userId, req.last.tags.perm)) {\n\t\tres.send('Not Authorized');\n\t\treturn;\n\t}\n\n\tnext();\n});\n\n\n//goes through permissions middleware\nrouter.on('-perm=SUPER invite/user', function(req, res, next) {\n\t\n\tres.send('You have invited a user!');\n\n});\n\n//does NOT go through perm middleware\nrouter.on('some/public/route', function(req, res, next) {\n\t\n\tres.send('You have invited a user!');\n\n});\n```\n\nNote that greedy middleware is filterable based on the route tags. You can define anything you want. Here's another\nexample:\n\n```javascript\n\n//if POST is present, then automatically parse the body\nrouter.on('-method=POST /**', express.parseBody());\n\n//body is automatically parsed for us\nrouter.on('-method=POST signup', function(req, res) {\n\n\tres.send('Thanks for signing up!');\n\n});\n```\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "connect-router@0.0.2",
  "dist": {
    "shasum": "0d693ac73d3dd0ffbabf8927d38daebe5e4d4dd2"
  },
  "_from": "connect-router"
}
